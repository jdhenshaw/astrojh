#==============================================================================#
# acornstools.py
#==============================================================================#
import numpy as np
from astropy.io import fits

def cubetrim(cube, ppv_vol):
    """
    Trims a cube according to scousepy ppv_vol trim Parameters

    Parameters
    ----------
    cube : spectralcube data cube
        Data cube generated by spectral cube
    ppv_vol : ndarray
        array of limits for cube trimming format should be:
        ppv_vol = [vmin, vmax, ymin, ymax, xmin, xmax]

    """

    velaxis = np.array(cube.world[:,0,0][0])
    if (ppv_vol[0] is not None) & (ppv_vol[1] is not None):
        trimids = np.where((velaxis>ppv_vol[0])&(velaxis<ppv_vol[1]))[0]

    if ppv_vol[0] is None:
        ppv_vol[0]=0
    else:
        ppv_vol[0]=min(trimids)
    if ppv_vol[1] is None:
        ppv_vol[1]=cube.shape[0]
    else:
        ppv_vol[1]=max(trimids)

    if ppv_vol[2] is None:
        ppv_vol[2]=0
    if ppv_vol[3] is None:
        ppv_vol[3]=cube.shape[1]

    if ppv_vol[4] is None:
        ppv_vol[4]=0
    if ppv_vol[5] is None:
        ppv_vol[5]=cube.shape[2]

    cube = cube[int(ppv_vol[0]):int(ppv_vol[1]),
                int(ppv_vol[2]):int(ppv_vol[3]),
                int(ppv_vol[4]):int(ppv_vol[5])]

    return cube

def acornstofits(x, y, z, cube, outputfits=True,
                 outputdir='./', outputfile='image.fits',
                 datatype='', dataunit='',
                 ppv_vol=[None,None,None,None,None,None]):
    """
    Accepts an array of acorns data as well as the original information
    regarding fitting (PPV_vol if using scousepy for example), and the original
    cube and creates an image of the required data. Returns a 2-D image of the
    data but a fitsfile can be created as an option. NB: this code assumes the
    input data is in pixel coordinates - use acornstofits_wcs if the input is
    in wcs coords.

    Parameters
    ----------
    x : ndarray
        array of x positions
    y : ndarray
        array of y positions
    z : ndarray
        data for image
    cube : spectralcube data cube
        Data cube generated by spectral cube
    outputfits : bool
        whether or not you want to output to fits (default==True)
    outputdir : string
        output directory (default will be current directory)
    outputfile : string
        output file name (default is image.fits)
    datatype : string
        To be added to the fits header e.g. intensity, velocity, dispersion etc
    dataunit : string
        Unit of the data
    ppv_vol : ndarray
        array of limits for cube trimming format should be:
        ppv_vol = [vmin, vmax, ymin, ymax, xmin, xmax]

    """

    cube = cubetrim(cube, ppv_vol)

    dataarr = np.empty(cube.shape[1::])
    dataarr[:,:]=np.NaN
    for i in range(len(x)):
        dataarr[int(y[i]), int(x[i])]=z[i]

    # output to fits if wanted
    if outputfits:
        header = cube.header
        header['BUNIT']=dataunit
        header['BTYPE']=datatype
        header.remove('CRPIX3')
        header.remove('CRVAL3')
        header.remove('CDELT3')
        header.remove('CUNIT3')
        header.remove('CTYPE3')

        hdu = fits.PrimaryHDU(dataarr, header=header)
        hdu.writeto(outputdir+outputfile, overwrite=True)

    return dataarr
